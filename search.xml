<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[springboot在filter中使用@Value注解]]></title>
    <url>%2F2019%2F03%2F30%2Fspringboot-use-%40Value-in-filter%2F</url>
    <content type="text"><![CDATA[由于filter中需要对请求进行重定向，且开发测试环境的重定向url不同，因此需要使用@Value来获取不同环境中的重定向地址。 但是发现@Value获取的值为null,最后找到了原因，是因为filter不是spring bean，@Value无法生效。 解决方法：1.将filter通过依赖注入FilterRegistrationBean ​ 2.使用DelegatingFilterProxy 123456789101112131415161718192021222324252627282930# 方法一@Configurationpublic class FilterConfig &#123; @Bean public FilterRegistrationBean registerFilter(BasicFilter filter) &#123; FilterRegistrationBean registration = new FilterRegistrationBean(); registration.setFilter(filter); registration.addUrlPatterns("/secure/*"); return registration; &#125;&#125;# 方法二@Configurationpublic class FilterConfig &#123; @Bean public Filter BasicFilter()&#123; return new BasicFilter(); &#125; @Bean public FilterRegistrationBean registerFilter() &#123; FilterRegistrationBean registration = new FilterRegistrationBean(); registration.setFilter(new DelegatingFilterProxy("BasicFilter")); registration.addUrlPatterns("/secure/*"); return registration; &#125;&#125;]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>filter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ManageIQ Provider开发（五）：Provider-google的代码结构]]></title>
    <url>%2F2019%2F03%2F02%2Fmanageiq-providers-google-layout%2F</url>
    <content type="text"><![CDATA[在《ManageIQ的工程结构》中，已经明确了providers的作用。接下来以provider-google为例，分析其代码结构。 provider的主要功能代码集中在app文件夹下中，根据功能划分为多个manager，分别为cloud_manager、network_manager, provider-amazon还有storage_manager。 Cloud_managercloud_manager是provider的主入口，负责创建、验证服务器，收集服务器基本信息，如可用区域、可用套餐、已拥有的虚拟主机等。 cloud_manager的代码结构： cloud_manager.rb为主入口，定义了ems(ExtmanagementSystem)的类型、描述、验证方式等 manager_mixin.rb的主要功能为实现与服务器的验证连接 cloud_manager文件夹 有cloud_manager涉及的类，如可用区域、可用套餐等。这些类都比较简单，仅继承managerIQ中的对应类 refresh的功能为数据转换，即把fog-google获得数据变为符合manageiq的数据 ​ 123456789101112131415161718192021222324252627282930313233343536373839# refresh_parser.rb# 定义了进行数据转换的方法def ems_inv_to_hashes log_header = "Collecting data for EMS : [#&#123;@ems.name&#125;] id: [#&#123;@ems.id&#125;]" _log.info("#&#123;log_header&#125;...") get_zones get_flavors get_volumes get_snapshots get_images get_instances # Must occur after get_volumes is called _log.info("#&#123;log_header&#125;...Complete") link_volumes_to_base_snapshots @dataenddef get_zones # 获取所有可用域 zones = @connection.zones.all # 数据进行转换 process_collection(zones, :availability_zones) &#123; |zone| parse_zone(zone) &#125;enddef parse_zone(zone) name = uid = zone.name type = ManageIQ::Providers::Google::CloudManager::AvailabilityZone.name new_result = &#123; :type =&gt; type, :ems_ref =&gt; uid, :name =&gt; name, &#125; return uid, new_resultend Network_managernetwork_manager的结构与cloud_manager类似 参考文档ManageIQ-Providers-google]]></content>
      <categories>
        <category>ManageIQ</category>
      </categories>
      <tags>
        <tag>manageiq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ManageIQ Provider开发（四）：ManageIQ的工程结构]]></title>
    <url>%2F2019%2F02%2F26%2Fmanageiq-project-layout%2F</url>
    <content type="text"><![CDATA[本文主要分析ManageIQ的工程结构，明确Provider的作用（将云服务商API获取的数据转变为符合ManageIQ需求的数据）。 ManageIQ的工程结构ManageIQ的工程结构示意图如下 Provider的作用就是为了适配不同的云服务商所提供的数据，将其转变为符合ManageIQ的数据。 Provider为了获取云服务商提供的数据，需要请求其各自的API。为了更好的解耦代码，Provider不直接与API进行交互，而是通过官方提供或开源的SDK进行交互。 这些SDK不仅解耦了代码，还对API数据进行了初步的封装，将json转变为了类，方便了Provider进行调用。 AMAZON-SDK为亚马逊官方提供的，功能比较齐全，代码量比较大，参照其开发自己需要的SDK比较费时费力；FOG-GOOGLE是开源的云服务器API交互SDK，基于FOG二次开发比较简单，快捷。 参考文档ManageIQ-Providers-amazon ManageIQ-Providers-google fog-google amazon-sdk(v2)]]></content>
      <categories>
        <category>ManageIQ</category>
      </categories>
      <tags>
        <tag>manageiq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ManageIQ Provider开发（三）：使用自定义前端页面]]></title>
    <url>%2F2019%2F01%2F11%2Fmanageiq-local-ui%2F</url>
    <content type="text"><![CDATA[在ManageIQ安装过程中，会从github上拉取manageiq-ui-classic库。现在我们开发新的Provider就需要修改manageiq-ui-classic库，使其支持新的Provider。 克隆源码12cd manangeiq/pluginsgit clone -b gaprindashvili-7 https://github.com/ManageIQ/manageiq-ui-classic.git 修改配置文件1234cd manageiq/bundler.dvim local_plugins.rboverride_gem 'manageiq-ui-classic', :path =&gt; File.expand_path('../plugins/manageiq-ui-classic', __dir__) 修改源代码manageiq/app/assets/javascripts/controllers/ems_common/ems_common_form_controller.js 中为各provider验证方式的前端显示，根据需要增加自己的验证方式 assesskey方式可参考代码中amazon的相关代码，搜索ec2即可定位相关代码 安装本地ui12cd manageiqbundle install]]></content>
      <categories>
        <category>ManageIQ</category>
      </categories>
      <tags>
        <tag>manageiq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ManageIQ Provider开发（二）：创建新的Provider]]></title>
    <url>%2F2019%2F01%2F07%2Fmanageiq-provider-generator%2F</url>
    <content type="text"><![CDATA[创建Provider123cd manageiqbundle exec rails generate provider foo_cloud --dummy 修改配置文件Provider生成器会在manageiq/Gemfile文件中添加foo_cloud,但还需要进一步修改 123456# generator自动生成group :vmware, :manageiq_default do manageiq_plugin "manageiq-providers-vmware"manageiq_plugin "manageiq-providers-foo_cloud" # TODO: Sort alphabetically... gem "vmware_web_service", "~&gt;0.3.0"end 123456789# 修改后的Gemfilegroup :foo_cloud, :manageiq_default do gem 'manageiq-providers-foo_cloud', :path =&gt; 'plugins/manageiq-providers-foo_cloud'endgroup :vmware, :manageiq_default do manageiq_plugin "manageiq-providers-vmware" gem "vmware_web_service", "~&gt;0.3.0"end 修改lib/workers/miq_worker_types.rb文件 在MIQ_WORKER_TYPES中添加 1234"ManageIQ::Providers::FooCloud::CloudManager::EventCatcher" =&gt; %i(manageiq_default),"ManageIQ::Providers::FooCloud::CloudManager::MetricsCollectorWorker" =&gt; %i(manageiq_default),"ManageIQ::Providers::FooCloud::CloudManager::RefreshWorker" =&gt; %i(manageiq_default),"ManageIQ::Providers::FooCloud::NetworkManager::RefreshWorker" =&gt; %i(manageiq_default), 在MIQ_WORKER_TYPES_IN_KILL_ORDER中添加 1234ManageIQ::Providers::FooCloud::CloudManager::MetricsCollectorWorkerManageIQ::Providers::FooCloud::CloudManager::RefreshWorkerManageIQ::Providers::FooCloud::NetworkManager::RefreshWorkerManageIQ::Providers::FooCloud::CloudManager::EventCatcher 安装新的Provider12cd manageiqbundle install 参考文档ManageIQ Provider生成器]]></content>
      <categories>
        <category>ManageIQ</category>
      </categories>
      <tags>
        <tag>manageiq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ManageIQ Provider开发（一）：ManageIQ的安装]]></title>
    <url>%2F2019%2F01%2F04%2Fmanageiq-install%2F</url>
    <content type="text"><![CDATA[系统环境Ubuntu 16.04 64位 依赖包安装及配置12345678910111213141516171819202122232425262728# Git and componentssudo apt install git# Memcached for the session storesudo apt install memcached # PostgreSQL Database server and to build 'pg' Gemsudo apt install postgresql libpq-dev# For Nokogiri Gemsudo apt install libxml2-dev libxslt-dev patch # For sqlite3 Gemsudo apt install libsqlite-dev libsqlite3-dev # For unf Gemsudo apt install g++ # For Curbsudo apt install libcurl4-gnutls-dev # For rugged Gemsudo apt install cmakesudo apt install libgit2-dev pkg-config libtool# For puma &lt; 3.7.0sudo apt install libssl-dev 123456789101112131415161718192021222324252627282930313233# Install Node.js(version &gt;= 8.9.0)wget https://nodejs.org/dist/v10.15.0/node-v10.15.0.tar.gztar -xzvf node-v10.15.0.tar.gzcd ./node-v10.15.0./configuresudo make &amp;&amp; make install# Enable Memcachedsudo systemctl enable memcachedsudo systemctl start memcached# Configure PostgreSQLsudo grep -q '^local\s' /etc/postgresql/9.5/main/pg_hba.conf || echo "local all all trust" | sudo tee -a /etc/postgresql/9.5/main/pg_hba.confsudo sed -i.bak 's/\(^local\s*\w*\s*\w*\s*\)\(peer$\)/\1trust/' /etc/postgresql/9.5/main/pg_hba.confsudo systemctl restart postgresqlsudo su postgres -c "psql -c \"CREATE ROLE root SUPERUSER LOGIN PASSWORD 'smartvm'\""# Install Ruby(version &gt;= 2.3.1)wget https://cache.ruby-lang.org/pub/ruby/2.4/ruby-2.4.5.tar.gztar -xzvf ruby-2.4.5.tar.gzcd ./ruby-2.4.5./configuresudo make &amp;&amp; make install# Install the Bower package managersudo npm install -g bower# Install the Yarn package managersudo npm install -g yarn# Install the Gulp and Webpack build systemsudo npm install -g gulp-clisudo npm install -g webpack ManageIQ安装当前版本 Gaprindashvili-7 ManageIQ在Github上master分支不是稳定版本 123456# Clone the Codegit clone -b gaprindashvili-7 https://github.com/ManageIQ/manageiq.git# Install ManageIQcd ./manageiqbin/setup ManageIQ的依赖安装，配置，数据库初始化都将执行，所以安装过程较长。国内网络原因可能会造成安装失败，建议挂梯子执行安装，或修改npm、yarn的源。 启动ManageIQ1bundle exec rake evm:start 访问localhost:3000 参考文档ManageIQ安装官方文档]]></content>
      <categories>
        <category>ManageIQ</category>
      </categories>
      <tags>
        <tag>manageiq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tuleap的postfix邮件设置]]></title>
    <url>%2F2018%2F11%2F22%2Ftuleap-postfix-config%2F</url>
    <content type="text"><![CDATA[Tuleap使用postfix作为邮件转发工具，自行搭建邮件服务器比较麻烦，我们可以使用postfix + smtp实现发送邮件的功能，这里以QQ邮箱为例，Gmail、163等同理。 配置main.cf123456789101112131415161718192021$ vim /etc/postfix/main.cf#修改inet_interfaces = localhostinet_interfaces = all#在文件最后添加myhostname = tuleap.example.commyorigin = $mydomainrelayhost = [smtp.qq.com]:587# Enable SASL authenticationsmtp_sasl_auth_enable = yes# Disallow methods that allow anonymous authenticationsmtp_sasl_security_options = noanonymous# Location of sasl_passwdsmtp_sasl_password_maps = hash:/etc/postfix/sasl/sasl_passwd# Enable STARTTLS encryptionsmtp_tls_security_level = encrypt# Location of CA certificatessmtp_tls_CAfile = /etc/postfix/server.pemsmtp_generic_maps = hash:/etc/postfix/generic 配置QQ邮箱SMTP账户生成QQ邮箱smtp服务token 创建账户配置文件 1234$ mkdir /etc/postfix/sasl$ vim /etc/postfix/sasl/sasl_passwd[smtp.qq.com]:587 xxxxxxxx@qq.com:token 创建hash加密文件sasl_passwd.db 1$ postmap /etc/postfix/sasl/sasl_passwd 创建CA证书12345678$ cd /etc/ssl/certs/$ vim Makefile# 修改证书有效期 DAYS 为合适的时间DAYS=xxx$ make server.pem$ mv server.pem /etc/postfix 添加账号映射Tuleap的邮件发信人为noreply@tuleap.example.com QQ邮箱SMTP的发件人为sasl_passwd中设置的账号 账号不同时，QQ邮箱会返回报错mail from address must be same as authorization user 1234$ vim /etc/postfix/generic#在文件最后添加noreply@tuleap.example.com xxxxx@qq.com 测试postfix重启postfix 1$ service postfix restart 登陆tuleap，测试邮件发送功能，如果收不到邮件，查看maillog发送日志排查错误 1$ cat /var/log/maillog]]></content>
      <categories>
        <category>Tuleap</category>
      </categories>
      <tags>
        <tag>tuleap</tag>
        <tag>postfix</tag>
        <tag>mail</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tuleap的安装]]></title>
    <url>%2F2018%2F11%2F21%2Ftuleap-install%2F</url>
    <content type="text"><![CDATA[系统CentOS 7 关闭SElinux修改selinux配置文件 12345678910111213$ vim /etc/selinux/config# This file controls the state of SELinux on the system.# SELINUX= can take one of these three values:# enforcing - SELinux security policy is enforced.# permissive - SELinux prints warnings instead of enforcing.# disabled - No SELinux policy is loaded.SELINUX=disabled# SELINUXTYPE= can take one of three two values:# targeted - Targeted processes are protected,# minimum - Modification of targeted policy. Only selected processes are protected.# mls - Multi Level Security protection.SELINUXTYPE=targeted 重启服务器 1$ shutdown -r now 验证selinux已关闭 123$ sestatusSELinux status: disabled 安装安装EPEL12$ yum install -y epel-release$ yum install -y centos-release-scl 安装 remi-safe 库1$ yum install -y https://rpms.remirepo.net/enterprise/remi-release-7.rpm 安装 Tuleap 库12345678$ vim /etc/yum.repos.d/Tuleap.repo[Tuleap]name=Tuleapbaseurl=https://ci.tuleap.net/yum/tuleap/rhel/7/dev/$basearchenabled=1gpgcheck=1gpgkey=https://ci.tuleap.net/yum/tuleap/gpg.key 安装 Tuleap12345678$ yum install -y \ rh-mysql57-mysql-server \ tuleap-plugin-agiledashboard \ tuleap-plugin-graphontrackers \ tuleap-theme-burningparrot \ tuleap-theme-flamingparrot \ tuleap-plugin-git \ tuleap-plugin-pullrequest 更多插件安装详见官方插件列表 配置数据库1234$ vim /etc/opt/rh/rh-mysql57/my.cnf.d/rh-mysql57-mysql-server.cnf#在[mysqld]下添加sql-mode=NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION 设置mysql开机自启 1$ systemctl enable rh-mysql57-mysqld 启动mysql 1$ systemctl start rh-mysql57-mysqld 设置mysql密码 1$ scl enable rh-mysql57 "mysqladmin -u root password" 启动 请勿重复执行该命令 12345/usr/share/tuleap/tools/setup.el7.sh \ --configure \ --server-name=tuleap.example.com \ --mysql-server=localhost \ --mysql-password=XXXXX server-name : 本地测试时设为localhost 确保防火墙开放所需端口 Web (TCP/80 &amp; TCP/443) SSH (git, admin): TCP/22 首次登陆登陆Tuleap (例如: tuleap.example.com) 默认的管理员密码在 /root/.tuleap_passwd 中可以找到]]></content>
      <categories>
        <category>Tuleap</category>
      </categories>
      <tags>
        <tag>tuleap</tag>
        <tag>php</tag>
        <tag>agile management</tag>
      </tags>
  </entry>
</search>
